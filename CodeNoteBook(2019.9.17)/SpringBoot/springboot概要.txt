1.为什么要用springboot
  传统项目：整合ssm或ssh时，需要考虑配置文件，jar冲突问题，整理起来繁琐。
  打包方式：打包成一个war包放入到tomcatwebapps目录下进行执行

2.什么是springboot
  springboot是一个快速开发框架，能够帮助我们快速整合第三方框架（原理是依靠Maven依赖关系和Maven继承），内嵌了http服务器（有tomcat和jetty，默认springboot默认使用tomcat），最终以java应用程序执行。   java - jar
且springboot完全采用注解化，spring3.0之后采用注解方式启动springMVC，内嵌http服务器通过java启动tomcat，项目中可以没用web.xml文件。且项目创建时需要把mvn项目设置为jar类型。

3.SpringBoot启动方式注解

①@EnableAutoConfiguration（第一种启动方式）
用于注解在类上，表示根据maven配置的依赖自动扫描类。扫包范围默认在当前类里。

@ComponentScan(包名)（第二种启动方式）
通过指定扫包路径来配置启动所需的controller类

@SpringBootApplication（第三种启动方式）
底层等同于@EnableAutoConfiguration+@ComponentScan，扫包范围为当前包的同级包里的类及当前类

SpringApplication.run(类名，类参数);用于表示程序入口。


4.springBoot访问静态资源

只需把静态资源放在resource的static目录下，即可通过localhost:8080/资源名 访问

5.springboot整合freemaker视图层

resource目录下新建templates目录，在此目录下创建ftl文件，即可通过键值对的方式在里面存取数据。

6.当需要springboot整合jsp页面时，需要把项目设置为war类型，不然访问不了jsp页面。

7.aop原理利用@ControllerAdvice(basePackage=扫包增强路径）来注解在异常捕获上

8.springboot整合log4j，利用aop技术统一处理web请求日志，在需要日志记录的类或方法上（service类）加@Slf4j，log4j便会自动帮你记录这个类或方法的日志。

9.springboot整合lombok让代码更简洁，在pojo类里可以用@Setter和@Getter代替变量的getter和setter方法 ，底层会利用字节码技术帮你在类里生成getter和setter方法。
或者直接加@data，等效于@Getter+@Setter

10.使用@Async实现异步执行方法，使方法之间不用互相等待，注解了@Async的方法是使用aop技术，在运行时开辟了单独的线程进行执行。

11.自定义参数：可以在application.properties内自定义参数（如name=ww），要读取时在变量上注解@Value（${name}）,即可把name的值装配到@value所注解的变量上。
且可以设置多个环境（如开发环境，测试环境，生产环境），可通过spring.profiles.active=pre来设置读取开发环境的自定义参数。

12.springboot整合mybatis
在application.properties里配置数据库默认读取名称： 
spring.datasource.url=
spring.datasource.username=
spring.datasource.password=
spring.datasource.driver-class-name=	
mybatis启动方式可以在mapper层不需要加注解，但是一定要在启动类的时候加上
@MapperScan(s扫描mapper的路径)（如果需要扫描多个包，在包名之间用逗号隔开即可）。同理如果在每个mapper类上都加了@Mapper，则在启动类上不需要再加@MapperScan。

13.springboot整合事务@Transaction注解
事务默认开启（即@EnableTransactionManage注解可以不加），只需在需要事务的方法或类上加上@Transactional注解即可。

14.springboot整合多数据库拆分。如果项目有多个数据库（如一个数据库存放配置文件，一个数据库存放业务数据），可以通过配置datasource，业务代码需要操作那个数据库，直接在类上或方法上添加@datasource-ref(配置的数据库名)。
创建一个DatasourceConfig类，利用@Configuration注解把该类注册到springboot容器中，在该类里配置数据库如
@Bean（name="test1Datasource"）
@ConfigurationProperties(prefix="spring.datasource.test1")(表示加载以此开头的数据库配置。
如需要操作test1数据库，在类或方法上添加@Datasource(ref="test1Datasource")
每个数据库都有一个事务，所以在配置事务的时候必须指定具体事务，如
@Transactional(transactionManager="test1TransactionMannger"),不然可能运行时会报错。

15.传统分布式事务可能一个方法里会同时对两个数据库进行操作，而事务只能配置一个，可能在出现错误时一个数据库执行了，一个数据库操作回滚了。
在传统分布式事务可以用jta+atomikos，注册一个全局事务（由于该方法没有补偿，一般微服务分布式不使用此方法，可以使用消息中间件，或基于自动补偿和人工补偿解决）。

16.jta+Atomikos
通过所有事务交给Atomikos管理，在给方法或类加事务控制的时候不需要指定事务，只需要直接加@Transactional（）注解就可以了。
通过@ConfigurationProperties(prefix="mysql.datasource.test1")读取配置的前缀为mysql.datasource.test1的数据源
通过@EnableConfigurationProperties(value={DBConfig.class,DBConfig2.class})使启动入口可以读取mybatis的配置文件

17.springboot整合mybatis分页插件pageHeleper
pageHelper.startPage(page,pageSize);//底层实现原理采用改写语句。